# -*- mode: ruby -*-
# vi: set ft=ruby :

BEGIN {
   # First we set our run directory.
   Rundir = File.dirname(__FILE__) 
   $LOAD_PATH << File.expand_path(File.join(Rundir, '../../ruby_libs/deep_merge/lib'))
   #puts "load path is #{$LOAD_PATH}"
   #puts "rundir is #{Rundir}"
   #puts "pwd is #{Dir.pwd}"
}
#viron = %x(env)

#puts "env is #{viron}"
#puts "requiring json"
require 'json'
#puts "requiring pp"
require 'PP'
#puts "requiring deep_merge"
require 'deep_merge'

#puts "done requiring"

PROFILE_DIR = "profiles"

# check if env is set
def get_profile_name
    if ENV["VAGRANT_PROFILE"].nil?
        # We need to check to see if
        return 'default' unless  File.exists?( File.join( Rundir, '.profile' ) )
        # We need set profile
        puts "Found .profile file."
        profile_name = File.read( File.join( Rundir, '.profile' ) ).strip
        puts "Going to load profile #{profile_name}. If this is not what you want"
        puts "remove the .profile file."
        return profile_name
    else
        profile_name = ENV["VAGRANT_PROFILE"]
        # We need to write out the .profile file.
        File.open(File.join( Rundir,'.profile'),'w') { |f| f.puts profile_name }
        return profile_name
    end
end 

def load_json( dir_prefix, profile_name )

    filename = File.join( Rundir, PROFILE_DIR , '.base.json' )
    if File.exists?( filename )
       json_file = File.read( filename )
       json =  JSON.parse( json_file ) 
    else
       json = {}
    end

    filename = File.join( Rundir, PROFILE_DIR , dir_prefix, 'base.json' )
    
    if File.exists?( filename )

       json_file = File.read( filename )
       json.deep_merge!( JSON.parse( json_file ) )

    else

       puts "Could not find #{filename}, aborting!"
       exit 1

    end

    #config_name = json['node']['config_name']

    "#{profile_name}".split(':').uniq.each do |profile|
       filename = File.join( Rundir, 'profiles', dir_prefix, "#{profile_name}.json" );
       puts "Looking for #{filename}"
       if File.exists?( filename )
          puts "    Loading #{filename}" 
          json_file = File.read( filename )
          json.deep_merge!( JSON.parse( json_file ) )
       else
          puts "Didn't find #{filename}"
       end
    end

    #if json['node']['config_name'].nil?
    #   json['node']['config_name'] = config_name
    #end

    return json

end

def get_multiple_vms
   filename = File.join( Rundir, 'profiles','.multiple_vms' )
   return [] unless File.exists?( filename )
   return IO.readlines(filename).
             grep( /^[^#].*$/ ).
             map{ |s| s.strip }.
             select{ |s| !s.empty?  }.
             map{ |v| v.to_sym }.
             uniq
end


# First let's define some common variable to use. These are used by all the
# VM's.


def configure_vm( config, json )
    config.vm.box = "opscode-ubuntu-12.04-i386"
    #config.vm.box      = 'tealium_ubuntu-12.04_chef-11.4.4'
    config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04-i386_provisionerless.box"
    #config.vm.box_url  = "https://s3.amazonaws.com/public.ops.tealiumiq.com/precise_64/tealium_ubuntu-12.04_chef-11.4.4.box"
    config_name        = json['node']['config_name']
    
    puts "Using config name of: #{config_name}"

    # First we need to set up the hostonly network
    unless json['hostonly_ip'].nil?
       config.vm.network :hostonly, json['hostonly_ip'] 
    end
    unless json['forward_ports'].nil?
       json['forward_ports'].each do |from, to|
           puts "Forwarding #{from.to_i} to #{to.to_i}"
           config.vm.forward_port from.to_i , to.to_i
       end
    end
    unless json['bridged'].nil?
        bridged_name = `VBoxManage list bridgedifs | grep '^Name:' | grep '#{json['bridged']}:' | perl -pe 's/Name:\\s*(.*)\\s*$/\\1/'`
        puts "The bridged_name is #{bridged_name}"
        config.vm.network :bridged, :bridge => bridged_name
    end

    # Share an additional folder to the guest VM. The first argument is
    # an identifier, the second is the path on the guest to mount the
    # folder, and the third is the path on the host to the actual folder.
    #config.vm.share_folder "v-data", "/vagrant_data", "../data"
    if !json["shares"].nil? and 
       !json["shares"]["v-sources"].nil?
       # Need to add a check to see if the sources directory has the 
       #  sources needed.
       #
       #
       puts "Setting up v-source share folders"
       mapping = json["shares"]["v-sources"]
       owner = mapping["owner"].nil? ? "www-data" : mapping["owner"]
       group = mapping["group"].nil? ? "www-data" : mapping["group"]

       config.vm.share_folder( 
          "v-sources", 
          json["shares"]["v-sources"]["to"], 
          json["shares"]["v-sources"]["from"],
          :owner => owner,
          :group => group
       )
    end

    if !json["shares"].nil?
       json["shares"].each do |name, mapping|
          puts "Setting up share folders"
          owner = mapping["owner"].nil? ? "vagrant" : mapping["owner"]
          group = mapping["group"].nil? ? "vagrant" : mapping["group"]
          config.vm.share_folder( 
             name, 
             mapping["to"], 
             mapping["from"],
             :owner => owner,
             :group => group
          ) unless name == "v-sources"
       end
    end
    
    config.vm.provision :chef_solo do |chef|
       puts "Performing chef_solo stuff"

       chef.log_level      = json['chef_log_level'].nil? ? :debug : json['chef_log_level'].to_sym
       puts "chef.log_level is #{chef.log_level}"
       chef.cookbooks_path = json['cookbooks_path']
       puts "chef.cookbooks_path is #{chef.cookbooks_path}"
       chef.roles_path     = json['roles_path']
       puts "chef.roles_path is #{chef.roles_path}"
       chef.data_bags_path = json['data_bags_path']
       puts "chef.data_bags_path is #{chef.data_bags_path}"
       chef.add_recipe( 'chef-solo-search' )

       puts "about to do roles"
       json['roles'].each {  |role| chef.add_role( role ) } unless json['roles'].nil?
       puts "about to do recipes"
       json['recipes'].each { | recipe | chef.add_recipe( recipe ) } unless json['recipes'].nil?
       chef.json = json['node']
    end
          
end

Vagrant.configure("2") do |config|
   config.omnibus.chef_version = :latest

end

Vagrant.configure("1") do |config|


   profile_name = get_profile_name
   multi = get_multiple_vms

   puts "Profile name is #{profile_name}"
   puts "Multi is #{multi}"
   if multi.empty?

      puts "Loading Single instance of vm"
      json = load_json( '', profile_name )
      puts "JSON is #{json}"

      puts "about to run configure_vm"

      configure_vm( config, json )

      puts "done configuring VM"

   else
      puts "Loading Multi Instances of VMS "

      Vagrant.configure("2") do |config|
        config.vm.provider "virtualbox" do |vb|
          vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-sources", "1"]
        end
      end

      multi.each do |env|
         config.vm.define env do |env_config| 
            puts "Loading configuration for #{env} vm"
            json = load_json( env.to_s, profile_name )
            configure_vm( env_config, json )
         end
      end
   end

end
